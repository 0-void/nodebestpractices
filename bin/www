#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ImportFromWebstorm:server');
var http = require('http');
const configurationManager = require('configurationManager');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(configurationManager.settings.port);
const SSLPort = normalizePort(configurationManager.settings.sslport);
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

if(configurationManager.environment === "development" && configurationManager.settings.useSSL === true)
{
  const https = require("https");
  const fs = require("fs");

  const httpsOptions = {
    key: fs.readFileSync('./cert/private.key'),
    cert: fs.readFileSync('./cert/server.crt')
  };
  process.stdout.write("Server will now listen on SSL port also as part of development mode");
  process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
  https.createServer(httpsOptions, app).listen(SSLPort);
}

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      process.stdout.write(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      process.stdout.write(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
